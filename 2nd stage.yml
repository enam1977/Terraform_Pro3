trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots/

stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
           vmImage: "ubuntu-18.04"
        steps:
          - task: DownloadSecureFile@1
            name: tfvardef
            displayName: Download terraform.tfvars
            inputs:
               secureFile: "terraform.tfvars"

           # Needed for Terraform VM deployment
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "known_hosts"
              sshPublicKey: $(PUBLIC_KEY)
              sshKeySecureFile: "terraform-azure"

          - bash: |
              cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/
            displayName: Copy terraform.tfvars

          - bash: |
              echo Pipeline workspace dir is $(Pipeline.Workspace)
              echo Terraform variable definition file is $(tfvardef.secureFilePath)
              cd $(Agent.TempDirectory)
              pwd
              ls -la
              cat terraform_azure.pub
              cd ~/.ssh/
              pwd
              ls -la
              cat known_hosts
              # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
              cd $(System.DefaultWorkingDirectory)  
              pwd
              ls -la
            displayName: Verify build environment (pre)

          # install Terraform Azure Pipelines Extension by Microsoft DevLabs
          # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
          

  # - stage: Build_FakeRestAPI
  #   jobs:
  #     - job: build_artifacts_FakeRestAPI
  #       displayName: Artifacts_FakeRestAPI
  #       pool:
  #         vmImage: "ubuntu-18.04"
  #       steps:
  #         - task: ArchiveFiles@2
  #           displayName: Archive FakeRestAPI
  #           inputs:
  #             rootFolderOrFile: "$(System.DefaultWorkingDirectory)/jmeter/fakerestapi"
  #             includeRootFolder: false
  #             archiveType: "zip"
  #             archiveFile: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
  #             verbose: true
  #         - task: PublishPipelineArtifact@1
  #           displayName: Publish FakeRestAPI artifact
  #           inputs:
  #             targetPath: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
  #             artifactName: "drop-fakerestapi"
  # - stage: Build_Selenium
  #   jobs:
  #     - job: build_artifacts_Selenium
  #       displayName: Artifacts_Selenium
  #       pool:
  #         vmImage: "ubuntu-18.04"
  #       steps:
  #         - task: ArchiveFiles@2
  #           displayName: Archive Selenium
  #           inputs:
  #             rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
  #             includeRootFolder: false
  #             archiveType: "zip"
  #             archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
  #             verbose: true

  #         - task: PublishPipelineArtifact@1
  #           displayName: Publish Selenium artifact
  #           inputs:
  #             targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
  #             artifactName: "drop-selenium"
  # - stage: Build_terraform
  #   jobs:
  #     - job: build_artifacts_terraform
  #       displayName: Artifacts_terraform
  #       pool:
  #         vmImage: "ubuntu-18.04"
  #       steps:
  #         - task: ArchiveFiles@2
  #           displayName: Archive terraform
  #           inputs:
  #             rootFolderOrFile: "$(System.DefaultWorkingDirectory)/terraform"
  #             includeRootFolder: false
  #             archiveType: "zip"
  #             archiveFile: "$(Build.ArtifactStagingDirectory)/terraform-$(Build.BuildId).zip"
  #             verbose: true

  #         - task: PublishPipelineArtifact@1
  #           displayName: Publish terraform artifact
  #           inputs:
  #             targetPath: "$(Build.ArtifactStagingDirectory)/terraform-$(Build.BuildId).zip"
  #             artifactName: "drop-terraform"
  - stage: Deployment
    jobs:
        - deployment: deployment_fakerestapi
          displayName: Deploy FakeRestAPI
          pool:
            vmImage: "ubuntu-18.04"
          environment: "udacity"
          strategy:
            runOnce:
              deploy:
                steps:
                - task: AzureWebApp@1
                  displayName: Deploy Azure WebApp
                  inputs:
                    azureSubscription: "enamul01"
                    appName: "webapp-webappservice"
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
                    deploymentMethod: zipDeploy

  - stage: Deploy
    jobs:
      - deployment: deployVM
        pool:
          vmImage: 'ubuntu-18.04'
        environment:
          name: "udacity"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    pwd
                    python3 -V
                    pip3 -V
                    # unzip
                    /usr/bin/chromium-browser --version
                    /usr/bin/chromedriver --version
                    # pip3 install selenium
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    pip3 install selenium
                    pip install pytest
                    pip install pytest-html
                    pip install chromedriver-py==88.0.4324.96
                    pip install pytest-xdist
                    pip install pytest-nunit
                    sudo apt install google-chrome-stable
                    pip install webdriver_manager
                    wget https://files.pythonhosted.org/packages/ed/9c/9030520bf6ff0b4c98988448a93c04fcbd5b13cd9520074d8ed53569ccfe/selenium-3.141.0.tar.gz
                    tar -zxvf selenium-3.141.0.tar.gz 
                    cd selenium-3.141.0/
                    python3 setup.py install                            
                    python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                    #Install Log Analytics agent on Linux computers (only need to run once)
                    wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                    sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                    sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
                  env: # To use secret variables in a script, we must explicitly map them as environment variables.
                    AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
                    AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
                  displayName: Configure selenium
  - stage: Tests
    jobs:
      - deployment: test_vm
        displayName: Tests on VM
        environment:
          name: "udacity"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    pwd
                    cd $(Pipeline.Workspace)/drop-selenium
                    find . -type f ! -name '$(Build.BuildId)-selenium.zip' -delete  
                    unzip -o $(Build.BuildId)-selenium.zip
                    pwd
                    # add sudo here
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 775 /var/log/selenium
                    sudo python3 login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log.txt
                    sudo chmod 775 /var/log/selenium/selenium-test.log.txt
                    echo "Display /var/log/selenium/selenium-test.log.txt"
                    sudo cat /var/log/selenium/selenium-test.log.txt
                    echo "-------------------------------------------------"
                    ls -la
                    # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    sudo cp /var/log/selenium/selenium-test.log.txt log/selenium/selenium-test.log.txt
                    cd log/selenium
                    pwd
                    ls -la
                  displayName: Selenium tests
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log.txt"
                    artifactName: "drop-selenium-logs"

      - job: test_jmeter
        displayName: Test JMeter
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              apache-jmeter-5.4/bin/jmeter --version
              # create log directory
              mkdir -p log/jmeter
              pwd
              ls -la
            displayName: Install JMeter
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t jmeter/stress-test.jmx \
                                           -l log/jmeter/stress-test-result.csv \
                                           -e -f -o log/jmeter/stress-test-html-report \
                                           -j log/jmeter/jmeter-stress-test.log
            displayName: JMeter stress test
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t jmeter/endurance-test.jmx \
                                           -l log/jmeter/endurance-test-result.csv \
                                           -e -f -o log/jmeter/endurance-test-html-report \
                                           -j log/jmeter/jmeter-endurance-test.log
            displayName: JMeter endurance test
          - task: ArchiveFiles@2
            displayName: Archive JMeter stress test HTML report
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip"
              verbose: true
          - task: ArchiveFiles@2
            displayName: Archive JMeter endurance test HTML report
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip"
              verbose: true
          - bash: |
              rm -rf log/jmeter/stress-test-html-report
              rm -rf log/jmeter/endurance-test-html-report
              cd log/jmeter
              pwd
              ls -la
            displayName: Delete original JMeter test HTML reports
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/jmeter"
              artifactName: "drop-jmeter-logs"

      - job: test_newman
        displayName: Test Postman (using Newman CLI)
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: NodeTool@0
            displayName: Install Node v14.X
            inputs:
              versionSpec: "14.x"
          - bash: |
              npm install -g newman
              newman --version
              # create log directory
              mkdir -p log/newman
              pwd
              ls -la
            displayName: Install Newman
          - bash: |
              newman run /postman/RegressionTest.json \
                         -e /postman/Proj3.postman_environment.json \
                         --reporters cli,junit \
                         --reporter-junit-export log/newman/regression-test.xml \
                         --suppress-exit-code
            displayName: Newman regression test
          - bash: |
              newman run postman/DataValidationTest.json \
                         -e /postman/Proj3.postman_environment.json \
                         --reporters cli,junit \
                         --reporter-junit-export log/newman/data-validation-test.xml \
                         --suppress-exit-code
              ls -la $(System.DefaultWorkingDirectory)/log/newman/
            displayName: Newman validation test
          - task: PublishPipelineArtifact@1
            displayName: Publish Newman logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/newman"
              artifactName: "drop-newman-logs"
          - task: PublishTestResults@2
            displayName: "Publish Newman test results"
            inputs:
              testRunner: "JUnit"
              searchFolder: "$(System.DefaultWorkingDirectory)/log/newman"
              testResultsFiles: "*.xml"
              mergeTestResults: true
              testRunTitle: "Publish Newman test results"

  # - stage: Destroy
  #   jobs:
  #     - job: destroy_azure_infrastructure
  #       displayName: Destroy Azure Infrastructure
  #       pool:
  #         vmImage: "ubuntu-18.04"
  #       steps:
  #         - task: DownloadSecureFile@1
  #           name: tfvardef
  #           displayName: Download terraform.tfvars
  #           inputs:
  #             secureFile: "terraform.tfvars"

  #         # Needed for Terraform VM deployment
  #         - task: InstallSSHKey@0
  #           inputs:
  #             knownHostsEntry: "known_hosts"
  #             sshPublicKey: $(PUBLIC_KEY)
  #             sshKeySecureFile: "terraform-azure"

  #         - bash: |
  #             cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
  #           displayName: Copy terraform.tfvars

  #         # install Terraform Azure Pipelines Extension by Microsoft DevLabs
  #         # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
  #         - task: TerraformInstaller@0
  #           displayName: Install Terraform
  #           inputs:
  #             terraformVersion: "0.13.5"

  #         - task: TerraformTaskV1@0
  #           displayName: Terraform Init
  #           inputs:
  #             provider: "azurerm"
  #             command: "init"
  #             backendServiceArm: "azurerm-sc"
  #             backendAzureRmResourceGroupName: "tstate"
  #             backendAzureRmStorageAccountName: "tstate12785"
  #             backendAzureRmContainerName: "tstate"
  #             backendAzureRmKey: "terraform.tfstate"
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"

  #         - task: TerraformTaskV1@0
  #           displayName: Terraform Destroy
  #           inputs:
  #             provider: "azurerm"
  #             command: "destroy"
  #             commandOptions: |
  #               -auto-approve
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
  #             environmentServiceNameAzureRM: "azurerm-sc"
