name: Azure Pipelines
variables:
  python.version: "3.7.6"

stages:
  - stage: Provision
    displayName: Provision for Azure Pipeline
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provisioning AppService
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          # - task: DownloadSecureFile@1
          #   name: tfvars
          #   displayName: 'Download terraform.tfvars'
          #   inputs:
          #     secureFile: 'terraform.tfvars'
          
          - task: DownloadSecureFile@1
            name: sshkey
            displayName: "Download SSH Public Key"
            inputs:
              secureFile: "terraform-azure.pub"

          - task: DownloadSecureFile@1
            name: privatekey
            displayName: "Download SSH private Key"
            inputs:
              secureFile: "terraform-azure.pem"
          - task: Bash@3
            displayName: "Copy SSH key & Azure Principal"
            inputs:
              targetType: "inline"
              script: |
                mkdir -p ~/.ssh
                cp $(sshkey.secureFilePath) ~/.ssh
                cp $(privatekey.secureFilePath) ~/.ssh
                cp $(azureEnv.secureFilePath) $(System.DefaultWorkingDirectory)/terraform
                chmod 400 ~/.ssh/terraform-azure.pub
                chmod 400 ~/.ssh/terraform-azure.pem
          
          

  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: "ubuntu-18.04"
        steps:

          - task: ArchiveFiles@2
            displayName: "Archive selenium"
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/selenium'
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip"

          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip"
              artifactName: "drop-selenium"

  - stage: Deployment
    jobs:
      
      - deployment: VMDeploy
        displayName: Deploy a VM
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    pwd
                    hostname
                    uname -a
                    cat /etc/*-release
                    sudo apt-get install software-properties-common -y
                    sudo apt-add-repository universe -y
                    sudo apt-get update -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    python3 -m pip install --upgrade pip
                    pip3 install selenium
                    python3 -V
                    pip3 -V
                    /usr/bin/chromium-browser --version
                    /usr/bin/chromedriver --version
                    python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                    # Install Log Analytics agent on Linux computers (only need to run once)
                    # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                    # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                    # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
                  env:  # To use secret variables in a script, we must explicitly map them as environment variables.
                    AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
                    AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
                  
                  displayName: Configure selenium and VM
  - stage: Tests
    jobs:
      - deployment: test_vm
        displayName: Tests on VM
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    cd $(Pipeline.Workspace)/drop-selenium
                    find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
                    unzip -o selenium-$(Build.BuildId).zip
                    pwd
                    ls -la
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                    # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    pwd
                    sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                    ls -la
                  
                    
                  displayName: Selenium tests
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
                    artifactName: "drop-selenium-logs"
