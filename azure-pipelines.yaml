trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots/

stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: DownloadSecureFile@1
            name: tfvardef
            displayName: Download terraform.tfvars
            inputs:
              secureFile: "terraform.tfvars"

            # Needed for Terraform VM deployment
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "known_hosts"
              sshPublicKey: $(PUBLIC_KEY)
              sshKeySecureFile: "id_rsa.pub"
          - task: DownloadSecureFile@1
            name: sshkey
            displayName: "Download SSH Public Key"
            inputs:
              secureFile: "id_rsa.pub"

          - task: DownloadSecureFile@1
            name: privatekey
            displayName: "Download SSH private Key"
            inputs:
              secureFile: "id_rsa"

          - task: Bash@3
            displayName: "Copy SSH key & Azure Principal"
            inputs:
              targetType: "inline"
              script: |
                mkdir -p ~/.ssh
                cp $(sshkey.secureFilePath) ~/.ssh
                cp $(privatekey.secureFilePath) ~/.ssh
                cp $(azureEnv.secureFilePath) $(System.DefaultWorkingDirectory)/terraform
                chmod 400 ~/.ssh/id_rsa.pub
                chmod 400 ~/.ssh/id_rsa

          # - bash: |
          #     echo Set Azure EnvironmentVariables
          #     cd $(System.DefaultWorkingDirectory)/terraform
          #     ls -la
          #     chmod 700 set_azure_env.sh
          #     ./set_azure_env.sh
          #   displayName: Set Azure Environment Variables

          - bash: |
              cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/
            displayName: Copy terraform.tfvars

          - bash: |
              echo Pipeline workspace dir is $(Pipeline.Workspace)
              echo Terraform variable definition file is $(tfvardef.secureFilePath)
              cd $(Agent.TempDirectory)
              pwd
              ls -la
              cat terraform_azure.pub
              cd ~/.ssh/
              pwd
              ls -la
              cat known_hosts
              # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
              cd $(System.DefaultWorkingDirectory)  
              pwd
              ls -la
            displayName: Verify build environment (pre)

          # install Terraform Azure Pipelines Extension by Microsoft DevLabs
          # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks

  - stage: Build_FakeRestAPI
    jobs:
      - job: build_artifacts_FakeRestAPI
        displayName: Artifacts_FakeRestAPI
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: ArchiveFiles@2
            displayName: Archive FakeRestAPI
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              verbose: true
          - task: PublishPipelineArtifact@1
            displayName: Publish FakeRestAPI artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip"
              artifactName: "drop-fakerestapi"

  - stage: Build_Selenium
    jobs:
      - job: build_artifacts_Selenium
        displayName: Artifacts_Selenium
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: ArchiveFiles@2
            displayName: Archive Selenium
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              artifactName: "drop-selenium"

  - stage: Build_terraform
    jobs:
      - job: build_artifacts_terraform
        displayName: Artifacts_terraform
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: ArchiveFiles@2
            displayName: Archive terraform
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/terraform"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/terraform-$(Build.BuildId).zip"
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish terraform artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/terraform-$(Build.BuildId).zip"
              artifactName: "drop-terraform"

  - stage: Download_terraform
    displayName: "Download Terraform Artif"
    jobs:
      - job: Build
        displayName: DownloadTerraformCode
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: TerraformBuild
              buildVersionToDownload: latest
              downloadPath: $(system.DefaultWorkingDirectory)/terraform

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Install Terraform 1.0.5"
            inputs:
              terraformVersion: 1.0.5

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : init"
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              backendServiceArm: enamul01
              backendAzureRmResourceGroupName: "terraform-storage-rg"
              backendAzureRmStorageAccountName: udacitystorage1
              backendAzureRmContainerName: tfstatefiles
              backendAzureRmKey: "dev-terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : validate"
            inputs:
              command: validate
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"

          # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
          #   displayName: "Terraform : plan"
          #   inputs:
          #     command: plan
          #     workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          #     commandOptions:
          #     environmentServiceNameAzureRM: enamul01
          #     #"-var-file=dev.tfvars"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : apply -auto-approve"
            inputs:
              command: apply
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              commandOptions: "-auto-approve"
              environmentServiceNameAzureRM: enamul01
              #-var-file=dev.tfvars
  - stage: Deployment
    jobs:
      - deployment: deployment_fakerestapi
        displayName: Deploy FakeRestAPI
        pool:
          vmImage: "ubuntu-18.04"
        environment: "udacity"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: Deploy Azure WebApp
                  inputs:
                    azureSubscription: "enamul01"
                    appName: "webapp-webappservice"
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
                    deploymentMethod: zipDeploy

  - stage: Deploy
    jobs:
      - deployment: deployVM
        pool:
          vmImage: "ubuntu-18.04"
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    pwd
                    hostname
                    uname -a
                    cat /etc/*-release
                    sudo apt-get install software-properties-common -y
                    sudo apt-add-repository universe -y
                    sudo apt-get update -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    python3 -m pip install --upgrade pip
                    pip3 install selenium
                    python3 -V
                    pip3 -V
                    /usr/bin/chromium-browser --version
                    /usr/bin/chromedriver --version
                    python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                    # Install Log Analytics agent on Linux computers (only need to run once)
                    # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
                    # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
                    # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
                  env: # To use secret variables in a script, we must explicitly map them as environment variables.
                    AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
                    AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
                  displayName: Configure selenium
  - stage: Tests
    jobs:
      - deployment: test_vm
        displayName: Tests on VM
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |

                    cd $(Pipeline.Workspace)/drop-selenium
                    find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
                    unzip -o selenium-$(Build.BuildId).zip
                    pwd
                    ls -la
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                    # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    pwd
                    sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                    ls -la
                  displayName: Selenium tests
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log"
                    artifactName: "drop-selenium-logs"

      - job: test_jmeter
        displayName: Test JMeter
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              apache-jmeter-5.4/bin/jmeter --version
              # create log directory
              mkdir -p log/jmeter
              pwd
              ls -la
            displayName: Install JMeter
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t jmeter/stress-test.jmx \
                                           -l log/jmeter/stress-test-result.csv \
                                           -e -f -o log/jmeter/stress-test-html-report \
                                           -j log/jmeter/jmeter-stress-test.log
            displayName: JMeter stress test
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t jmeter/endurance-test.jmx \
                                           -l log/jmeter/endurance-test-result.csv \
                                           -e -f -o log/jmeter/endurance-test-html-report \
                                           -j log/jmeter/jmeter-endurance-test.log
            displayName: JMeter endurance test
          - task: ArchiveFiles@2
            displayName: Archive JMeter stress test HTML report
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip"
              verbose: true
          - task: ArchiveFiles@2
            displayName: Archive JMeter endurance test HTML report
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip"
              verbose: true
          - bash: |
              rm -rf log/jmeter/stress-test-html-report
              rm -rf log/jmeter/endurance-test-html-report
              cd log/jmeter
              pwd
              ls -la
            displayName: Delete original JMeter test HTML reports
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/jmeter"
              artifactName: "drop-jmeter-logs"

      - job: test_newman
        displayName: Test Postman (using Newman CLI)
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: NodeTool@0
            displayName: Install Node 14.x
            inputs:
              versionSpec: "14.x"

          - bash: |
              npm install -g newman
              newman -v
              # create log dirctry
              mkdir -p log/newman
              pwd
              ls -la
            displayName: Install Newman
          - bash: |
              newman run postman/RegressionTest.json \
                         -e postman/Proj3.postman_environment.json \
                         -r cli,junit \
                         --reporter-junit-export log/newman/regression-test.xml \
                         --suppress-exit-code
            displayName: Newman Regression Test
          - bash: |
              newman run postman/DataValidationTest.json \
                         -e postman/Proj3.postman_environment.json \
                         -r cli,junit \
                         --reporter-junit-export log/newman/data-validation-test.xml \
                         --suppress-exit-code
              ls -la $(System.DefaultWorkingDirectory)/log/newman
            displayName: Newman DataValidationTest Test
          - task: PublishPipelineArtifact@1
            displayName: Publish Newman logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/newman"
              artifactName: "drop-newman-logs"

          - task: PublishTestResults@2
            displayName: "Publish Newman test results"
            inputs:
              testRunner: "JUnit"
              searchFolder: "$(System.DefaultWorkingDirectory)/log/newman"
              testResultsFiles: "*.xml"
              mergeTestResults: true
              testRunTitle: "Publish Newman test results"

  # - stage: Destroy
  #   jobs:
  #     - job: destroy_azure_infrastructure
  #       displayName: Destroy Azure Infrastructure
  #       pool:
  #         vmImage: "ubuntu-18.04"
  #       steps:
  #         - task: DownloadSecureFile@1
  #           name: tfvardef
  #           displayName: Download terraform.tfvars
  #           inputs:
  #             secureFile: "terraform.tfvars"

  #         # Needed for Terraform VM deployment
  #         - task: InstallSSHKey@0
  #           inputs:
  #             knownHostsEntry: "known_hosts"
  #             sshPublicKey: $(PUBLIC_KEY)
  #             sshKeySecureFile: "terraform-azure"

  #         - bash: |
  #             cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
  #           displayName: Copy terraform.tfvars

  #         # install Terraform Azure Pipelines Extension by Microsoft DevLabs
  #         # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
  #         - task: TerraformInstaller@0
  #           displayName: Install Terraform
  #           inputs:
  #             terraformVersion: "0.13.5"

  #         - task: TerraformTaskV1@0
  #           displayName: Terraform Init
  #           inputs:
  #             provider: "azurerm"
  #             command: "init"
  #             backendServiceArm: "azurerm-sc"
  #             backendAzureRmResourceGroupName: "tstate"
  #             backendAzureRmStorageAccountName: "tstate12785"
  #             backendAzureRmContainerName: "tstate"
  #             backendAzureRmKey: "terraform.tfstate"
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"

  #         - task: TerraformTaskV1@0
  #           displayName: Terraform Destroy
  #           inputs:
  #             provider: "azurerm"
  #             command: "destroy"
  #             commandOptions: |
  #               -auto-approve
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
  #             environmentServiceNameAzureRM: "azurerm-sc"
