trigger:
  - main

# Stages
# Stage-1:
# Task-1: Copy terraform-manifests files to Build Artifact Directory
# Task-2: Publish build articats to Azure Pipelines
# Pipeline Hierarchial Flow: Stages -> Stage -> Jobs -> Job -> Steps -> Task1, Task2, Task3

stages:
  # Build Stage
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: Build
        displayName: Build Job
        pool:
          vmImage: "ubuntu-latest"
        steps:
          ## Publish Artifacts pipeline code in addition to Build and Push
          - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)
          - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
          # Task-2: Copy files (Copy files from a source folder to target folder)
          # Source Directory: $(System.DefaultWorkingDirectory)/terraform-manifests
          # Target Directory: $(Build.ArtifactStagingDirectory)
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              Contents: "**"
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
              OverWrite: true
          # List files from Build Artifact Staging Directory - After Copy
          - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
          # Task-3: Publish build artifacts (Publish build to Azure Pipelines)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "terraform-build"
              publishLocation: "Container"



steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform 1.0.5'
  inputs:
    terraformVersion: 1.0.5
    steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : init'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform Continuous Integration CI Pipeline/terraform-manifests'
    backendServiceArm: enamul01
    backendAzureRmResourceGroupName: 'terraform-storage-rg'
    backendAzureRmStorageAccountName: udacitystorage
    backendAzureRmContainerName: tfstatefiles
    backendAzureRmKey: 'dev-terraform.tfstate'
    
    steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : validate'
  inputs:
    command: validate
    workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform Continuous Integration CI Pipeline/terraform-manifests'
 
 steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : plan'
  inputs:
    command: plan
    workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform Continuous Integration CI Pipeline/terraform-manifests'
    commandOptions: '-var-file=dev.tfvars'
    environmentServiceNameAzureRM: enamul01

    steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
  displayName: 'Terraform : apply -auto-approve'
  inputs:
    command: apply
    workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform Continuous Integration CI Pipeline/terraform-manifests'
    commandOptions: '-var-file=dev.tfvars -auto-approve'
    environmentServiceNameAzureRM: enamul01
      #stages:
  #- stage: A
  #  jobs:
  #  - job: A1
  #  - job: A2

  #- stage: B
  #  jobs:
  #  - job: B1
  #  - job: B2
  - stage: Deploy

    pool:

    name: Azure Pipelines

    steps:
      - task: UsePythonVersion@0

        displayName: "Use Python 3.8"

        inputs:

        versionSpec: 3.8

      - script: |

          python -m pip install --upgrade pip

          sudo apt-get upgrade -y

          sudo apt-get install python3-pip -y

          sudo apt-get install unzip -y

          sudo apt-get install -y chromium-browser

          pip3 install selenium

          pip install pytest

          pip install pytest-html

          pip install chromedriver-py==88.0.4324.96

          pip install pytest-xdist

          pip install pytest-nunit

          sudo apt install google-chrome-stable

          pip install webdriver_manager

    displayName: "Install Plugins"

  - script: |

      sudo rm -rf chromedriver*

      wget https://chromedriver.storage.googleapis.com/<version>/chromedriver_linux64.zip //update the version here

      unzip chromedriver*.zip

      sudo mv chromedriver -f /usr/bin

      pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml || true

    displayName: "Run Python Test"

  - task: PublishPipelineArtifact@1

    displayName: "Publish Pipeline Artifact"

    inputs:

    artifact: "Test_reports"

  - task: PublishTestResults@2

    displayName: "Publish Integration Test"
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "result*.xml"
      mergeTestResults: true
      testRunTitle: "Publish Test Results"

  - task: LakshayKaushik.PublishHTMLReports.publishhtmlreport.publishhtmlreport@1

    displayName: "publish html report"

    inputs:

    htmlType: "HTML-Report"
