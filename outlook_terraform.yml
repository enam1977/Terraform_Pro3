trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots/

stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: DownloadSecureFile@1
            name: tfvardef
            displayName: Download terraform.tfvars
            inputs:
              secureFile: "terraform.tfvars"

          # Needed for Terraform VM deployment
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "known_hosts"
              sshPublicKey: $(PUBLIC_KEY)
              sshKeySecureFile: "terraform-azure"

          - bash: |
              cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/
            displayName: Copy terraform.tfvars
          - bash: |
              echo Pipeline workspace dir is $(Pipeline.Workspace)
              echo Terraform variable definition file is $(tfvardef.secureFilePath)
              cd $(Agent.TempDirectory)
              pwd
              ls -la
              cat terraform_azure.pub
              cd ~/.ssh/
              pwd
              ls -la
              cat known_hosts
              # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
              cd $(System.DefaultWorkingDirectory)  
              pwd
              ls -la
            displayName: Verify build environment (pre)
          # install Terraform Azure Pipelines Extension by Microsoft DevLabs
          # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
          

  - stage: Build
    displayName: Build Stage
    jobs:
      - job: Build
        displayName: Build Stage
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - task: PublishPipelineArtifact@1
            displayName: "Publish Terraform Code"
            inputs:
              path: $(system.DefaultWorkingDirectory)
              artifact: TerraformBuild
  - stage: DownloadArtifact
    displayName: "Download Terraform Artif"
    jobs:
      - job: Build
        displayName: DownloadCode
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: TerraformBuild
              buildVersionToDownload: latest
              downloadPath: $(system.DefaultWorkingDirectory)/terraform

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Install Terraform 1.0.5"
            inputs:
              terraformVersion: 1.0.5

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : init"
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              backendServiceArm: enamul01
              backendAzureRmResourceGroupName: "terraform-storage-rg"
              backendAzureRmStorageAccountName: udacitystorage
              backendAzureRmContainerName: tfstatefiles
              backendAzureRmKey: "dev-terraform.tfstate"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : validate"
            inputs:
              command: validate
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
          
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform : plan'
            inputs:
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              commandOptions:
              environmentServiceNameAzureRM: enamul01
               #'-var-file=dev.tfvars'
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: "Terraform : apply -auto-approve"
            inputs:
              command: apply
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              commandOptions: "-var-file=dev.tfvars -auto-approve"
              environmentServiceNameAzureRM: enamul01